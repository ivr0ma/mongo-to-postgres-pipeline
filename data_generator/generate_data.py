from pymongo import MongoClient, errors
import os
import random
import uuid
import logging
from datetime import datetime, timedelta
from faker import Faker
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB
MONGO_URI = os.getenv("MONGO_URI", "mongodb://admin:admin@mongo:27017")
DB_NAME = os.getenv("MONGO_DB", "etl_database")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    db = client[DB_NAME]
    client.server_info()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
except errors.ServerSelectionTimeoutError:
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Faker
fake = Faker()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ .env
def get_count(var_name, default):
    return int(os.getenv(var_name, default))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
users = [str(uuid.uuid4()) for _ in range(get_count("USER_COUNT", 1000))]
products = [str(uuid.uuid4()) for _ in range(get_count("PRODUCT_COUNT", 500))]

# –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def generate_user_sessions(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    return [{
        "session_id": str(uuid.uuid4()),
        "user_id": random.choice(users),
        "start_time": (start_time := fake.date_time_this_year()).isoformat(),
        "end_time": (start_time + timedelta(minutes=random.randint(5, 120))).isoformat(),
        "pages_visited": [fake.uri_path() for _ in range(random.randint(1, 10))],
        "device": fake.user_agent(),
        "actions": [fake.word() for _ in range(random.randint(1, 5))]
    } for _ in range(n)]

def generate_product_price_history(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã."""
    return [{
        "product_id": random.choice(products),
        "price_changes": [{
            "date": (datetime.now() - timedelta(days=i)).isoformat(),
            "price": round(random.uniform(10, 1000), 2)
        } for i in range(random.randint(1, 10))],
        "current_price": round(random.uniform(10, 1000), 2),
        "currency": "USD"
    } for _ in range(n)]

def generate_event_logs(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
    event_types = ["login", "logout", "purchase", "error", "click"]
    return [{
        "event_id": str(uuid.uuid4()),
        "timestamp": fake.date_time_this_year().isoformat(),
        "event_type": random.choice(event_types),
        "details": fake.sentence()
    } for _ in range(n)]

def generate_support_tickets(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    statuses = ["open", "closed", "pending"]
    issues = ["login issue", "payment failure", "bug report", "feature request"]
    return [{
        "ticket_id": str(uuid.uuid4()),
        "user_id": random.choice(users),
        "status": (status := random.choice(statuses)),
        "issue_type": random.choice(issues),
        "messages": [fake.sentence() for _ in range(random.randint(1, 5))],
        "created_at": (created := fake.date_time_this_year()).isoformat(),
        "updated_at": (created + timedelta(hours=random.randint(1, 48))).isoformat()
    } for _ in range(n)]

def generate_user_recommendations(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    return [{
        "user_id": random.choice(users),
        "recommended_products": [random.choice(products) for _ in range(random.randint(1, 5))],
        "last_updated": fake.date_time_this_year().isoformat()
    } for _ in range(n)]

def generate_moderation_queue(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤."""
    statuses = ["pending", "approved", "rejected"]
    return [{
        "review_id": str(uuid.uuid4()),
        "user_id": random.choice(users),
        "product_id": random.choice(products),
        "review_text": fake.text(),
        "rating": random.randint(1, 5),
        "moderation_status": random.choice(statuses),
        "flags": [fake.word() for _ in range(random.randint(0, 3))],
        "submitted_at": fake.date_time_this_year().isoformat()
    } for _ in range(n)]

def generate_search_queries(n):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    return [{
        "query_id": str(uuid.uuid4()),
        "user_id": random.choice(users),
        "query_text": fake.sentence(),
        "timestamp": fake.date_time_this_year().isoformat(),
        "filters": [fake.word() for _ in range(random.randint(0, 3))],
        "results_count": random.randint(0, 50)
    } for _ in range(n)]

def insert_data(collection_name, generator, count):
    """–§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {collection_name}...")
        data = generator(count)
        if data:
            db[collection_name].insert_many(data)
            logging.info(f"{collection_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ MongoDB: {count} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {collection_name}: {e}")

# –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

insert_data("user_sessions", generate_user_sessions, get_count("USER_SESSIONS_COUNT", 1000))
insert_data("product_price_history", generate_product_price_history, get_count("PRODUCT_PRICE_HISTORY_COUNT", 1000))
insert_data("event_logs", generate_event_logs, get_count("EVENT_LOGS_COUNT", 2000))
insert_data("support_tickets", generate_support_tickets, get_count("SUPPORT_TICKETS_COUNT", 500))
insert_data("user_recommendations", generate_user_recommendations, get_count("USER_RECOMMENDATIONS_COUNT", 1000))
insert_data("moderation_queue", generate_moderation_queue, get_count("MODERATION_QUEUE_COUNT", 500))
insert_data("search_queries", generate_search_queries, get_count("SEARCH_QUERIES_COUNT", 1000))

logging.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ MongoDB!")
